@using Newtonsoft.Json
@model MyHomeWork.Models.Customers

@{
    ViewBag.Title = "Customers";
}

<h2>List - @ViewBag.Title</h2>

<div id="overlay"></div>
<div id="dialog_form" class="dialog" title="Form" style="justify-content: center; align-items: center;">
    <div class="dialog-content">
        @using (Html.BeginForm("Save", "Customers", FormMethod.Post, new { @class = "form-horizontal", @id = "main_form" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" name="IdRequest" id="id-request" value="0" />
            <div style="display: flex;">
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.CustomerId, new { htmlAttributes = new { @class = "form-control", @id = "CustomerId", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                </div>
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @id = "FirstName" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div style="display: flex;">
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @id = "LastName" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control", @id = "Company" } })
                    @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                </div>
            </div>
            <div style="display: flex;">
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @id = "City" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", @id = "Country" } })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
            </div>
            <div style="display: flex">
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.Phone1, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.Phone1, new { htmlAttributes = new { @class = "form-control", @id = "Phone1" } })
                    @Html.ValidationMessageFor(model => model.Phone1, "", new { @class = "text-danger" })
                </div>
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.Phone2, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.Phone2, new { htmlAttributes = new { @class = "form-control", @id = "Phone2" } })
                    @Html.ValidationMessageFor(model => model.Phone2, "", new { @class = "text-danger" })
                </div>
            </div>
            <div style="display: flex">
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "Email", @type = "email" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.SubscriptionDate, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.SubscriptionDate, new { htmlAttributes = new { @class = "form-control", @id = "SubscriptionDate", @type = "datetime-local" } })
                    @Html.ValidationMessageFor(model => model.SubscriptionDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div style="display: flex">
                <div class="spacer"></div>
                <div class="form-group" style="flex:1;">
                    @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label", @style = "text-left" })
                    @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control", @id = "Website", @type = "url" } })
                    @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                </div>
                <div class="spacer"></div>
                <p id="error-handler" class="text-danger"></p>
            </div>
            <div class="form-group text-center">
                <input type="submit" value="Confirm" class="btn btn-primary confirm-button"/>
            </div>
        }
    </div>
</div>
<div id="dialog_delete" class="dialog" title="Delete">
    <div class="dialog-content">
        @using (Html.BeginForm("Delete", "Customers", FormMethod.Post, new { @class = "form-horizontal", @id = "main_form_delete" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" name="CustomerId" id="CustomerIdDelete" value=""/>
            <div class="form-group text-center">
                <label class="text-warning">Are you sure you want to delete this customer?</label>
            </div>
            <div class="form-group text-center">
                <input type="submit" value="Confirm" class="btn btn-success confirm-button-delete"/>
                <input type="button" value="Cancel" class="btn btn-danger" onclick="closeDialog('dialog_delete')"/>
            </div>
        }
    </div>
</div>
<style>
    #table_lands tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    #table_lands tr:nth-child(odd) {
        background-color: #ffffff;
    }
    #table_lands tr:hover {
        background-color: #ddd;
    }
</style>
<table id="table_lands" class="table table-striped table-bordered" cellspacing="0" width="70%">
    <thead>
        <button class="btn btn-success create-button right">Create</button>
        <tr>
              <th>Customer Id</th>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Company</th>
              <th>City</th>
              <th>Country</th>
              <th>Phone 1</th>
              <th>Phone 2</th>
              <th>Email</th>
              <th>Subscription Date</th>
              <th>Website</th>
              <th></th>
              <th></th>
        </tr>
    </thead>
    <tfoot>
        <tr>
            <th>Customer Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Company</th>
            <th>City</th>
            <th>Country</th>
            <th>Phone 1</th>
            <th>Phone 2</th>
            <th>Email</th>
            <th>Subscription Date</th>
            <th>Website</th>
            <th></th>
            <th></th>
        </tr>
    </tfoot>
    <tbody>
    @if (ViewBag.listTable != null)
    {
        foreach (var document in ViewBag.listTable)
        {
            var subscriptionDate = document.SubscriptionDate.ToString();
            <tr>
                <td>@document.CustomerId</td>
                <td>@document.FirstName</td>
                <td>@document.LastName</td>
                <td>@document.Company</td>
                <td>@document.City</td>
                <td>@document.Country</td>
                <td>@document.Phone1</td>
                <td>@document.Phone2</td>
                <td>@document.Email</td>
                <td>@subscriptionDate</td>
                <td>@document.Website</td>
                <td><button class="btn btn-primary edit-button">Edit</button></td>
                <td><button class="btn btn-danger delete-button">Delete</button></td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="6">Cannot find data!</td>
        </tr>
    }
    </tbody>
</table>
<script type="text/javascript">
    function convertMongoDateToHTMLDate(mongoDate) {
        var milliseconds = parseInt(mongoDate.match(/\d+/)[0]);
        var date = new Date(milliseconds);
        var htmlDate = date.toISOString().slice(0, 19).replace('T', ' '); // YYYY-MM-DD HH:mm:ss
        return htmlDate;
    }
    function convertHTMLDateToMongoDate(htmlDate) {
        var date = new Date(htmlDate);
        var milliseconds = date.getTime();
        var mongoDate = "/Date(" + milliseconds + ")/";
        return mongoDate;
    }
    function generateUUID() {
        var d = new Date().getTime();
        if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
            d += performance.now(); //use high-precision timer if available
        }
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
    }
    function generateId() {
        return new Promise((resolve, reject) => {
            var uuid = generateUUID();
            $.ajax({
                type: "GET",
                url: '@Url.Action("CheckCustomer", "Customers")',
                data: { customerId: uuid },
                success: function (data) {
                    if (data === "true") {
                        resolve(uuid);
                    }
                    else {
                        reject('Customer Id does not exist!');
                    }
                }
            });
        });
    }
    $(function() {
        var defaultConfig = {
            autoOpen: false,
            resizable: false,
            modal: true,
            width: 700,
        };
        $("#dialog_form").dialog(defaultConfig);
        $("#dialog_delete").dialog(defaultConfig);
    });
    $(document).ready(function () {
        $('#table_lands').DataTable(
            {
                "paging": true,
                "ordering": false,
                "info": true,
                "searching": true,
                "lengthChange": true,
                "autoWidth": true,
                "responsive": true,
                "pageLength": 5,
                "lengthMenu": [5, 10, 25, 50, 75, 100],
            }
        );
        $(document).on('click', '.edit-button', function () {
            var row = $(this).closest('tr');
            var customerId = row.find('td:eq(0)').text();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCustomer", "Customers")',
                data: { customerId: customerId },
                success: function (data) {
                    $('#IdRequest').val('1'); // 1 = Edit
                    var CustomerId = $('#CustomerId');
                    CustomerId.val(data.CustomerId);
                    $('#FirstName').val(data.FirstName);
                    $('#LastName').val(data.LastName);
                    $('#Company').val(data.Company);
                    $('#City').val(data.City);
                    $('#Country').val(data.Country);
                    $('#Phone1').val(data.Phone1);
                    $('#Phone2').val(data.Phone2);
                    $('#Email').val(data.Email);
                    $('#SubscriptionDate').val(convertMongoDateToHTMLDate(data.SubscriptionDate));
                    $('#Website').val(data.Website);
                }
            });
            openDialog('dialog_form');
        });
        $(document).on('click', '.delete-button', function () {
            var row = $(this).closest('tr');
            var customerId = row.find('td:eq(0)').text();
            $('#CustomerIdDelete').val(customerId);
            openDialog('dialog_delete');
        });
        $(document).on('click', '.create-button', function () {
            var CustomerId = $('#CustomerId');
            CustomerId.val(generateUUID());
            $('#IdRequest').val('0'); // 0 = Create
            $('#FirstName').val('');
            $('#LastName').val('');
            $('#Company').val('');
            $('#City').val('');
            $('#Country').val('');
            $('#Phone1').val('');
            $('#Phone2').val('');
            $('#Email').val('');
            $('#SubscriptionDate').val('');
            $('#Website').val('');
            openDialog('dialog_form');
        });
        setInterval(function () {
            var customerId = $('#CustomerId').val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("CheckCustomer", "Customers")',
                data: { customerId: customerId },
                success: function (data) {
                    if (data === "true") {
                        $('#CustomerId').css('border-color', 'red');
                        $('.confirm-button').prop('disabled', true);
                        $('#error-handler').text('[Customer Id] already exists, please generate a new one!');
                    }
                    else {
                        $('#CustomerId').css('border-color', '');
                        $('.confirm-button').prop('disabled', false);
                        $('#error-handler').text('');
                    }
                }
            });
        }, 1000);
    });
    function openDialog(id) {
        $('#' + id).dialog('open');
    }
    function closeDialog(id) {
        $('#' + id).dialog('close');
    }
</script>